String.prototype.format = function () {
    var a = this;
    for (var k in arguments) {
        a = a.replace(new RegExp("\\{" + k + "\\}", 'g'), arguments[k]);
    }
    return a
}

Array.prototype.asyncForEach = async function (callback) {
    let array = this;
    for (let index = 0; index < array.length; index++) {
        await callback(array[index], index, array);
    }
}

String.prototype.gen32b = function() {
    for(var i = 0, h = 1779033703 ^ this.length; i < this.length; i++)
        h = Math.imul(h ^ this.charCodeAt(i), 3432918353),
            h = h << 13 | h >>> 19;
    let returned = () => {
        h = Math.imul(h ^ h >>> 16, 2246822507);
        h = Math.imul(h ^ h >>> 13, 3266489909);
        return (h ^= h >>> 16) >>> 0;
    }
    return returned();  //return number
}

Number.prototype.mulberry = function (){
    let a = this;
    var t = a += 0x6D2B79F5;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296; //return number
}

Array.prototype.random = function (){
    let random = Math.random();
    if (arguments[0])random = arguments[0].toString().gen32b().mulberry()
    random = Math.floor(random * this.length);
    return this[random];
}

String.prototype.encodeBase64 = function () {
    return btoa(this)
}
String.prototype.decodeBase64 = function () {
    return atob(this)
}

String.prototype.levenshtein = function (compareTo){
    if(this.length == 0) return compareTo.length;
    if(compareTo.length == 0) return this.length;
    var matrix = [];
    var i;
    for(i = 0; i <= compareTo.length; i++){ matrix[i] = [i]; }
    var j;
    for(j = 0; j <= this.length; j++){ matrix[0][j] = j; }
    for(i = 1; i <= compareTo.length; i++){
        for(j = 1; j <= this.length; j++){
            if(compareTo.charAt(i-1) == this.charAt(j-1)){
                matrix[i][j] = matrix[i-1][j-1];
            } else {
                matrix[i][j] = Math.min(matrix[i-1][j-1] + 1, // substitution
                    Math.min(matrix[i][j-1] + 1, // insertion
                        matrix[i-1][j] + 1)); // deletion
            }
        }
    }
    return matrix[compareTo.length][this.length];
}